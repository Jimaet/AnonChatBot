import logging
import json
import os
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import config  # Import the config file
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, date

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=config.API_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∂–∞–ª–æ–±
complaints = {}
admins = set()  # –ù–∞–±–æ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤
chats = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
searching = set()  # –ù–∞–±–æ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∏—â—É—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
admin_viewing_ids = set()  # –ù–∞–±–æ—Ä –¥–ª—è –∞–¥–º–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥—è—Ç ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤
chat_counter_file = 'chat_counter.json'  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ —á–∞—Ç–æ–≤

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='üöÄ–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ'), KeyboardButton(text='–í—ã–±—Ä–∞—Ç—å –ø–æ–ª')]], resize_keyboard=True)
gender_keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–º'), KeyboardButton(text='–∂')], [KeyboardButton(text='–ù–∞–∑–∞–¥')]], resize_keyboard=True)
stop_keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='‚õîÔ∏è–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥')]], resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ —á–∞—Ç–∞
def create_chat_folder(chat_id):
    folder_path = f'chat_logs/{chat_id}'
    os.makedirs(folder_path, exist_ok=True)
    return folder_path

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
def save_message(sender_id, message, chat_id):
    folder_path = create_chat_folder(chat_id)
    log_file_path = os.path.join(folder_path, 'chat.txt')
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    with open(log_file_path, 'a', encoding='utf-8') as log_file:
        log_file.write(f'{timestamp} - {sender_id}: {message}\n')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞
async def save_media(file_id, file_name, chat_id):
    folder_path = create_chat_folder(chat_id)
    file_path = os.path.join(folder_path, file_name)
    file = await bot.download_file_by_id(file_id)
    with open(file_path, 'wb') as f:
        f.write(file.getvalue())
    save_message("SYSTEM", f"Media saved as {file_name}", chat_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
async def send_found_message(user_id, chat_user):
    if user_id in admins:
        await bot.send_message(user_id, f"–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ï–≥–æ ID: <code>{chat_user}</code>", parse_mode='HTML')

    await bot.send_message(user_id, "<b>–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω</b> üò∫\n\n"
                                      "<b><i>/next ‚Äî –∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞</i></b>\n"
                                      "<b><i>/stop ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥</i></b>\n\n"
                                      "https://t.me/", reply_markup=stop_keyboard, parse_mode='HTML')

    await bot.send_message(chat_user, "<b>–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω</b> üò∫\n\n"
                                      "<b><i>/next ‚Äî –∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞</i></b>\n"
                                      "<b><i>/stop ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥</i></b>\n\n"
                                      "https://t.me/", reply_markup=stop_keyboard, parse_mode='HTML')

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—á—ë—Ç—á–∏–∫–æ–º —á–∞—Ç–æ–≤
def load_chat_counter():
    if os.path.exists(chat_counter_file):
        with open(chat_counter_file, 'r') as file:
            data = json.load(file)
            if data['date'] == str(date.today()):
                return data['count']
    return 0

def save_chat_counter(count):
    data = {'date': str(date.today()), 'count': count}
    with open(chat_counter_file, 'w') as file:
        json.dump(data, file)

def increment_chat_counter():
    count = load_chat_counter() + 1
    save_chat_counter(count)
    return count

async def check_subscription(user_id):
    channel_ids = [config.CHANNEL_ID_1, config.CHANNEL_ID_2]  # ID –∫–∞–Ω–∞–ª–æ–≤
    for channel_id in channel_ids:
        member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
        if member.status not in ['member', 'administrator', 'creator']:
            return False
    return True

@router.message(Command(commands=['start']))
async def send_welcome(message: types.Message):
    user_id = message.from_user.id

    if not await check_subscription(user_id):
        await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n"
                             f"<a href='https://t.me/{config.CHANNEL_USERNAME_1}'>–ö–∞–Ω–∞–ª 1</a>\n"
                             f"<a href='https://t.me/{config.CHANNEL_USERNAME_2}'>–ö–∞–Ω–∞–ª 2</a>",
                             parse_mode='HTML')
        return

    await message.answer("–ò–¥–µ—Ç –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=start_keyboard)
    searching.add(user_id)

@router.message(lambda message: message.text == '–í—ã–±—Ä–∞—Ç—å –ø–æ–ª')
async def choose_gender(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–ª", reply_markup=gender_keyboard)

@router.message(lambda message: message.text == '–º')
async def choose_male(message: types.Message):
    user_id = message.from_user.id
    save_gender(user_id, '–º')
    await message.answer("–¢—ã –≤—ã–±—Ä–∞–ª –ø–æ–ª '–º'. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –ø–æ–∏—Å–∫—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=start_keyboard)
    await search_new_partner(message)

@router.message(lambda message: message.text == '–∂')
async def choose_female(message: types.Message):
    user_id = message.from_user.id
    save_gender(user_id, '–∂')
    await message.answer("–¢—ã –≤—ã–±—Ä–∞–ª–∞ –ø–æ–ª '–∂'. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –ø–æ–∏—Å–∫—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=start_keyboard)
    await search_new_partner(message)

@router.message(lambda message: message.text == '–ù–∞–∑–∞–¥')
async def back_to_start(message: types.Message):
    await send_welcome(message)

def save_gender(user_id, gender):
    try:
        with open('user_ids.json', 'r') as file:
            data = json.load(file)
    except FileNotFoundError:
        data = {}

    data[str(user_id)] = gender

    with open('user_ids.json', 'w') as file:
        json.dump(data, file)

@router.message(Command(commands=['start']))
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    await message.answer("–ò–¥–µ—Ç –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
    searching.add(user_id)

    for chat_user in chats:
        if chats[chat_user] is None and chat_user != user_id and chat_user not in searching:
            # –ù–∞—à–ª–∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
            chats[chat_user] = user_id
            chats[user_id] = chat_user
            increment_chat_counter()
            await send_found_message(user_id, chat_user)
            searching.discard(user_id)
            return

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è None
    chats[user_id] = None
    searching.discard(user_id)

@router.message(Command(commands=['next']))
async def next_command(message: types.Message):
    user_id = message.from_user.id
    if user_id in chats and chats[user_id] is not None:
        chat_user = chats[user_id]
        chats.pop(chat_user)  # –£–¥–∞–ª—è–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–∑ —á–∞—Ç–æ–≤
        chats.pop(user_id)  # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–æ–≤
        await bot.send_message(chat_user, "–†–∞–∑–≥–æ–≤–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω. –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
        await bot.send_message(user_id, "–†–∞–∑–≥–æ–≤–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω. –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=start_keyboard)
    else:
        await message.answer("–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.", reply_markup=start_keyboard)

    # –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    await search_new_partner(message)

@router.message(Command(commands=['stop']))
async def end_chat_command(message: types.Message):
    user_id = message.from_user.id
    if user_id in chats and chats[user_id] is not None:
        chat_user = chats[user_id]
        chats.pop(chat_user)  # –£–¥–∞–ª—è–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–∑ —á–∞—Ç–æ–≤
        chats.pop(user_id)  # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–æ–≤
        await bot.send_message(chat_user, "–†–∞–∑–≥–æ–≤–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=start_keyboard)
        await bot.send_message(user_id, "–†–∞–∑–≥–æ–≤–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=start_keyboard)
    else:
        await message.answer("–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.", reply_markup=start_keyboard)

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø–æ–∏—Å–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    if user_id in searching:
        searching.remove(user_id)

@router.message(lambda message: message.text == 'üöÄ–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ')
async def start_chat(message: types.Message):
    await search_new_partner(message)

@router.message(lambda message: message.text == '‚õîÔ∏è–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥')
async def stop_chat(message: types.Message):
    await end_chat_command(message)

@router.message(lambda message: message.text == '–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞')
async def report_user(message: types.Message):
    user_id = message.from_user.id
    if user_id not in chats or chats[user_id] is None:
        await message.answer("–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.", reply_markup=start_keyboard)
        return

    chat_user = chats[user_id]
    complaints[chat_user] = complaints.get(chat_user, 0) + 1
    if complaints[chat_user] >= 3:
        complaints[chat_user] = 0
        await bot.send_message(chat_user, "–ù–∞ –≤–∞—Å –ø–æ—Å—Ç—É–ø–∏–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∂–∞–ª–æ–±. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è.")
    
    await message.answer("–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ.", reply_markup=stop_keyboard)

@router.message(lambda message: message.text and message.text.endswith('qwertyzxcgagatina'))
async def admin_login(message: types.Message):
    user_id = message.text[:-8]
    if message.from_user.id == int(user_id):
        admins.add(int(user_id))
        await message.answer("–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞.")

@router.message(lambda message: message.text == '–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–º–µ–Ω—é' or (message.text and message.text.endswith('qwertyzxcgagatina')))
async def admin_logout(message: types.Message):
    user_id = message.from_user.id
    if user_id in admins:
        admins.remove(user_id)
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–º–µ–Ω—é.")
    else:
        await message.answer("–í—ã –Ω–µ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é.")

@router.message(lambda message: message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ')
async def show_user_info(message: types.Message):
    user_id = message.from_user.id
    if user_id not in admins:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    if user_id in chats and chats[user_id] is not None:
        chat_user = chats[user_id]
        user_info = f"–°–æ–±–µ—Å–µ–¥–Ω–∏–∫: [—Å—Å—ã–ª–∫–∞](tg://user?id={chat_user})\nID: {chat_user}"
        await message.answer(user_info, parse_mode=types.ParseMode.MARKDOWN)
    else:
        await message.answer("–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.")

@router.message(Command(commands=['search']))
async def search_new_partner(message: types.Message):
    user_id = message.from_user.id

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
    if user_id in chats and chats[user_id] is not None:
        chat_user = chats[user_id]
        chats.pop(chat_user)  # –£–¥–∞–ª—è–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–∑ —á–∞—Ç–æ–≤
        chats.pop(user_id)  # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–æ–≤
        await bot.send_message(chat_user, "–†–∞–∑–≥–æ–≤–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω. –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
        await bot.send_message(user_id, "–†–∞–∑–≥–æ–≤–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω. –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=start_keyboard)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø–æ–∏—Å–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    if user_id in searching:
        searching.remove(user_id)

    await message.answer("–ò–¥–µ—Ç –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
    searching.add(user_id)

    for chat_user in chats:
        if chats[chat_user] is None and chat_user != user_id and chat_user not in searching:
            # –ù–∞—à–ª–∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
            chats[chat_user] = user_id
            chats[user_id] = chat_user
            increment_chat_counter()
            if user_id in admin_viewing_ids:
                await bot.send_message(user_id, f"–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ï–≥–æ ID: <code>{chat_user}</code>", parse_mode='HTML')
            await send_found_message(user_id, chat_user)
            searching.discard(user_id)
            return

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è None
    chats[user_id] = None
    searching.discard(user_id)

@router.message(lambda message: message.text == '–í—ã–±—Ä–∞—Ç—å –ø–æ–ª')
async def choose_gender(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ú –∏–ª–∏ –î")

@router.message(lambda message: message.text and message.text.upper() in ['–ú', '–î'])
async def process_gender(message: types.Message):
    user_id = message.from_user.id
    gender = message.text.upper()

    if gender not in ['–ú', '–î']:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ú –∏–ª–∏ –î")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
    filename = 'user_ids.json'
    try:
        with open(filename, 'r') as file:
            data = json.load(file)
    except FileNotFoundError:
        data = {}

    data[str(user_id)] = gender

    with open(filename, 'w') as file:
        json.dump(data, file)

    await message.answer(f"–ü–æ–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {gender}")

@router.message(lambda message: message.text == 'qwertyzxcgagatinaqwertyzxcgagatina')
async def admin_toggle_id_view(message: types.Message):
    user_id = message.from_user.id
    if user_id in admin_viewing_ids:
        admin_viewing_ids.remove(user_id)
        await message.answer("–í—ã –±–æ–ª—å—à–µ –Ω–µ –≤–∏–¥–∏—Ç–µ ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤.")
    else:
        admin_viewing_ids.add(user_id)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã –≤–∏–¥–∏—Ç–µ ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤.")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞
    try:
        with open('user_ids.json', 'r') as file:
            data = json.load(file)
    except FileNotFoundError:
        data = {}

    total_users = len(data)
    male_count = sum(1 for gender in data.values() if gender == '–º')
    female_count = sum(1 for gender in data.values() if gender == '–∂')

    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ - {total_users}, –∏–∑ –Ω–∏—Ö –ú - {male_count}, –î - {female_count}")

@router.message()
async def relay_message(message: types.Message):
    user_id = message.from_user.id

    if message.text == '–í—ã–±—Ä–∞—Ç—å –ø–æ–ª':
        await choose_gender(message)
        return

    if user_id not in chats or chats[user_id] is None:
        await message.answer("–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.", reply_markup=start_keyboard)
        return

    chat_user = chats[user_id]
    chat_id = f'{min(user_id, chat_user)}#{max(user_id, chat_user)}'

    try:
        if message.voice:
            voice = message.voice.file_id
            await bot.send_voice(chat_user, voice=voice)
            await save_media(voice, f'{user_id}_voice.ogg', chat_id)

        elif message.audio:
            audio = message.audio.file_id
            await bot.send_audio(chat_user, audio=audio)
            await save_media(audio, f'{user_id}_audio.mp3', chat_id)

        elif message.photo:
            photo = message.photo[-1].file_id
            await bot.send_photo(chat_user, photo=photo)
            await save_media(photo, f'{user_id}_photo.jpg', chat_id)

        elif message.video:
            video_file_id = message.video.file_id
            await bot.send_video(chat_user, video=video_file_id)
            await save_media(video_file_id, f'{user_id}_video.mp4', chat_id)

        elif message.video_note:
            video_note_file_id = message.video_note.file_id
            await bot.send_video_note(chat_user, video_note=video_note_file_id)
            await save_media(video_note_file_id, f'{user_id}_video_note.mp4', chat_id)

        elif message.animation:
            animation = message.animation.file_id
            await bot.send_animation(chat_user, animation=animation)
            await save_media(animation, f'{user_id}_animation.gif', chat_id)

        elif message.document:
            document = message.document.file_id
            await bot.send_document(chat_user, document=document)
            await save_media(document, f'{user_id}_document', chat_id)

        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            await bot.send_message(chat_user, message.text)
            save_message(user_id, message.text, chat_id)

    except Exception as e:
        logger.error(f"Failed to relay message to {chat_user}: {e}")

async def main():
    await dp.start_polling(bot, skip_updates=True)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())